open docker desktop
docker images
docker build -t frontend:1.0 .
docker run -p 8080:8080 --env-file .env frontend:1.0
won't run so import dependencies with version on requirements.txt
pip freeze on PS and take the neede module
rebuild and rerun the image:
docker build -t frontend:1.1 .
docker run -p 8080:8080 --env-file .env frontend:1.1

created the docker file, localhost:8080 should open directly the login page for the webapp
now i want to push the new image to the docker registry
ibmcloud -> kubernetes -> container registry -> quick start -> login to ibmcloud
then targe the resource group: ibmcloud target -g Default

# access the container registry: 
ibmcloud cr login
or
docker login -u iamapikey -p BVxp0pzNEgBMkUi0kewNuwRmgbJbb4gyBZxLRmo4yvdZ de.icr.io

docker tag frontend:1.1 de.icr.io/cloud-lab-david/frontend:1.1
docker push de.icr.io/cloud-lab-david/frontend:1.1
should now see under images a new image just created

go to kubernetes cluster -> copy the command in the guida -> login to clusterÃ¹
ibmcloud ks cluster config -c ch57j8tf0g7vrvtbj3o
kubectl get namespaces

setup the secret and the config map for both of app and main:
to filter the history commands for the kubectl commands use this:
Get-History | Where-Object {$_.CommandLine -match "kubectl"}

kubectl create secret generic search-nlu-secret --from-literal="NLU_APIKEY=RxYjDRyTHyjtsLu2FOPP5mZAol37eOmFeVcDW4PMWWRP"
# kubectl create configmap search-nlu-configmap --from-literal="NLU_BASEURL=https://api.eu-de.natural-language-understanding.watson.cloud.ibm.com/instances/47a3cf3a-4b24-413e-b480-3abe76a8eb67" --from-literal="NLU_VERSION=2022-04-07" 

cd kubernetes
kubectl apply -f deployment.yaml
kubectl apply -f service.yaml
kubectl get pods -> should see 1 pod running

do the same thing with the frontend

in the service.yaml file for the deployment of the frontend webapp
we used a NodePort type to make it available to the external world

create the configmap 
kubectl create configmap frontend-configmap --from-literal="SEARCH_NLU_ENDPOINT=http://127.0.0.1:3000/search"
kubectl create secret generic frontend-secrets --from-literal="AUTH_USERNAME=tester" --from-literal="AUTH_PASSWORD=cloudlab2023" --from-literal="SESSION_SECRET=cjvhbkyujh6fc8tuvbkugjcv"
kubectl get pods
kubectl get services

if cluster is ready:
open cluster dashboard, configmap, edit frontend-configmap,
edit the search-nlu-endpoint to http://search-nlu:3000/search pointing to the internal service of kubernetese to let the 2 pods interact with each other

cd kubernetes
kubectl apply -f deployment.yaml
kubectl get pods
should see 2 running
kubectl apply -f service.yaml
kubectl get pods
kubectl get services

retrieve IP of worker node
kubectl get nodes
take the external IP -> copy and paste on web with /30060 and shoud jump to the login page